# Nome do workflows, mais descritivo
name: Laravel CI - Run Tests and Code Style Checks

# Gatilhos para a branch 'master'
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    steps:
      # Passo 1: Clona o repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- MELHORIAS DE CACHE ---
      # Cache para as dependências do Composer para acelerar o processo
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          restore-keys: |
            ${{ runner.os }}-composer-

          key: ''
      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Passo 2: Cria o .env para que o Docker Compose possa configurar os serviços
      - name: Create .env file for Docker Compose
        run: cp .env.testing .env
      # Passo 3: Sobe os containers Docker
      - name: Start Docker services
        run: docker compose up -d

      # --- MELHORIA DE ROBUSTEZ ---
      # Adiciona uma pequena espera para garantir que o MySQL esteja pronto para aceitar conexões
      - name: Wait for Database Connection
        run: sleep 10

      # Passo 4: Instala as dependências do Composer
      - name: Install Composer Dependencies
        run: docker compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader

      # Passo 5: Prepara o ambiente Laravel dentro do container
      - name: Prepare Laravel Application
        run: |
          docker compose exec -T app cp .env.example .env
          docker compose exec -T app php artisan key:generate
          docker compose exec -T app php artisan config:clear

      # --- MELHORIA DE QUALIDADE DE CÓDIGO ---
      # Passo 6: Verifica o estilo do código com o Laravel Pint
      - name: Run Code Style Check (Pint)
        run: docker compose exec -T app ./vendor/bin/pint --test

      # Passo 7: Roda a suíte de testes do PHPUnit
      - name: Run PHPUnit Tests
        run: docker compose exec -T app php artisan test

      # Passo 8: Para os containers ao final da execução
      - name: Stop Docker services
        if: always() # Garante que este passo sempre rode, mesmo se os testes falharem
        run: docker compose down
