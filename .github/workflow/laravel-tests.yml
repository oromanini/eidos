# Nome do workflow
name: Laravel CI - Run Tests and Code Style Checks

# Gatilhos para a branch 'main' (mais comum que 'master')
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Clona o repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # Passo 2: Configura o cache para acelerar as execuções futuras
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Passo 3: Cria o arquivo .env para o Docker a partir da configuração de teste
      - name: Create .env file for testing environment
        run: cp .env.testing .env

      # Passo 4: Sobe os containers Docker em background
      - name: Start Docker services
        run: docker compose up -d

      # Passo 5: Espera o banco de dados ficar pronto de forma robusta
      - name: Wait for Database Connection
        run: |
          echo "Waiting for database to be ready..."
          until docker compose exec -T db mysqladmin ping -h "127.0.0.1" --silent; do
            echo "Database is unavailable - sleeping"
            sleep 1
          done
          echo "Database is ready!"

      # Passo 6: Instala as dependências do Composer e NPM
      - name: Install Composer Dependencies
        run: docker compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install NPM Dependencies
        run: docker compose exec -T app npm install

      # Passo 7: Compila os assets de frontend
      - name: Build Frontend Assets
        run: docker compose exec -T app npm run build

      # Passo 8: Prepara o ambiente Laravel (chave e banco de dados de teste)
      - name: Prepare Laravel Application
        run: |
          docker compose exec -T app php artisan key:generate
          docker compose exec -T app php artisan migrate --force
          docker compose exec -T app php artisan config:clear

      # Passo 9: Verifica o estilo do código com o Laravel Pint
      - name: Run Code Style Check (Pint)
        run: docker compose exec -T app ./vendor/bin/pint --test

      # Passo 10: Roda a suíte de testes do PHPUnit
      - name: Run PHPUnit Tests
        run: docker compose exec -T app php artisan test

      # Passo 11: Para os containers ao final da execução
      - name: Stop Docker services
        if: always() # Garante que este passo sempre rode, mesmo se os testes falharem
        run: docker compose down
